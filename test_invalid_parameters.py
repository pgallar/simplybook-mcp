#!/usr/bin/env python3
"""
Script para probar espec√≠ficamente endpoints que podr√≠an causar 
el error "Invalid request parameters" seg√∫n la documentaci√≥n de SimplyBook.me
"""

import asyncio
import json
from datetime import datetime, timedelta
from fastmcp import Client


async def test_invalid_parameters():
    """Probar endpoints con par√°metros que podr√≠an ser inv√°lidos"""
    
    print("üîç Probando endpoints con par√°metros potencialmente inv√°lidos")
    print("=" * 70)
    
    try:
        client = Client("http://localhost:8001/sse")
        
        async with client:
            print("‚úÖ Conectado al servidor MCP SSE")
            
            # Esperar inicializaci√≥n
            await asyncio.sleep(5)
            
            # La autenticaci√≥n ahora es interna y autom√°tica
            print("\nüîê Autenticaci√≥n interna autom√°tica")
            print("‚úÖ Usando credenciales del archivo .env")
            
            # Esperar para que la autenticaci√≥n interna se complete
            await asyncio.sleep(2)
            
            # Probar get_bookings con par√°metros de fecha en formato incorrecto
            print("\nüìÖ Probando get_bookings con formato de fecha incorrecto...")
            try:
                result = await client.call_tool("get_bookings", {
                    "date_from": "30-07-2025",  # Formato incorrecto
                    "date_to": "30/07/2025"     # Formato incorrecto
                })
                print("‚úÖ get_bookings con formato incorrecto ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con formato incorrecto")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_bookings con par√°metros vac√≠os
            print("\nüìÖ Probando get_bookings con par√°metros vac√≠os...")
            try:
                result = await client.call_tool("get_bookings", {
                    "date_from": "",
                    "date_to": ""
                })
                print("‚úÖ get_bookings con par√°metros vac√≠os ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con par√°metros vac√≠os")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_bookings con par√°metros nulos
            print("\nüìÖ Probando get_bookings con par√°metros nulos...")
            try:
                result = await client.call_tool("get_bookings", {
                    "date_from": None,
                    "date_to": None
                })
                print("‚úÖ get_bookings con par√°metros nulos ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con par√°metros nulos")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_available_slots con service_id inv√°lido
            print("\n‚è∞ Probando get_available_slots con service_id inv√°lido...")
            try:
                result = await client.call_tool("get_available_slots", {
                    "service_id": "999999",  # ID que no existe
                    "date": "2025-07-30"
                })
                print("‚úÖ get_available_slots con service_id inv√°lido ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con service_id inv√°lido")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_available_slots con fecha inv√°lida
            print("\n‚è∞ Probando get_available_slots con fecha inv√°lida...")
            try:
                result = await client.call_tool("get_available_slots", {
                    "service_id": "2",
                    "date": "2025-13-45"  # Fecha inv√°lida
                })
                print("‚úÖ get_available_slots con fecha inv√°lida ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con fecha inv√°lida")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_calendar_data con fechas inv√°lidas
            print("\nüìÖ Probando get_calendar_data con fechas inv√°lidas...")
            try:
                result = await client.call_tool("get_calendar_data", {
                    "start_date": "2025-07-30",
                    "end_date": "2025-07-29"  # end_date antes que start_date
                })
                print("‚úÖ get_calendar_data con fechas inv√°lidas ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con fechas inv√°lidas")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_bookings con par√°metros adicionales no documentados
            print("\nüìÖ Probando get_bookings con par√°metros no documentados...")
            try:
                result = await client.call_tool("get_bookings", {
                    "date_from": "2025-07-30",
                    "date_to": "2025-07-30",
                    "invalid_param": "test",  # Par√°metro no documentado
                    "another_invalid": 123
                })
                print("‚úÖ get_bookings con par√°metros no documentados ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con par√°metros no documentados")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
            # Probar get_bookings con tipos de datos incorrectos
            print("\nüìÖ Probando get_bookings con tipos de datos incorrectos...")
            try:
                result = await client.call_tool("get_bookings", {
                    "date_from": 12345,  # N√∫mero en lugar de string
                    "date_to": ["2025", "07", "30"]  # Lista en lugar de string
                })
                print("‚úÖ get_bookings con tipos incorrectos ejecutado")
                if isinstance(result.data, dict) and result.data.get("success"):
                    print("‚úÖ Funcion√≥ con tipos incorrectos")
                else:
                    print(f"‚ùå Error: {result.data}")
            except Exception as e:
                print(f"‚ùå Excepci√≥n: {e}")
            
    except Exception as e:
        print(f"‚ùå Error general: {e}")


if __name__ == "__main__":
    asyncio.run(test_invalid_parameters()) 